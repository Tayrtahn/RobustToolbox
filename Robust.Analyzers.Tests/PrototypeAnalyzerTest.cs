using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;
using VerifyCS =
    Microsoft.CodeAnalysis.CSharp.Testing.CSharpAnalyzerVerifier<Robust.Analyzers.PrototypeAnalyzer, Microsoft.CodeAnalysis.Testing.DefaultVerifier>;

namespace Robust.Analyzers.Tests;

//[Parallelizable(ParallelScope.All | ParallelScope.Fixtures)]
public sealed class PrototypeAnalyzerTest
{
    private static Task Verifier(string code, params DiagnosticResult[] expected)
    {
        var test = new CSharpAnalyzerTest<PrototypeAnalyzer, DefaultVerifier>()
        {
            TestState =
            {
                Sources = { code }
            },
        };

        // ExpectedDiagnostics cannot be set, so we need to AddRange here...
        test.TestState.ExpectedDiagnostics.AddRange(expected);

        return test.RunAsync();
    }

    [Test]
    public async Task RedundantTypeTest()
    {
        const string code = """
            using System;
            using Robust.Shared.Prototypes;

            namespace Robust.Shared.Prototypes
            {
                public class PrototypeAttribute : Attribute
                {
                    public string? Type { get; internal set; }
                    public readonly int LoadPriority = 1;

                    public PrototypeAttribute(string? type = null, int loadPriority = 1)
                    {
                        Type = type;
                        LoadPriority = loadPriority;
                    }

                    public PrototypeAttribute(int loadPriority)
                    {
                        Type = null;
                        LoadPriority = loadPriority;
                    }
                }
                public interface IPrototype;
            }

            [Prototype]
            public sealed partial class GoodAutoPrototype : IPrototype;

            [Prototype("someOtherName")]
            public sealed partial class GoodUnmatchedPrototype : IPrototype;

            [Prototype("badMatched")]
            public sealed partial class BadMatchedPrototype : IPrototype;
            """;

        await Verifier(code,
            // /0/Test0.cs(32,2): warning RA0033: Prototype BadMatchedPrototype has explicitly set type "badMatched" that matches autogenerated value
            VerifyCS.Diagnostic().WithSpan(32, 2, 32, 25).WithArguments("BadMatchedPrototype", "badMatched")
        );
    }
}
